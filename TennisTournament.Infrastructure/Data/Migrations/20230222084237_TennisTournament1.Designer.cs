// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TennisTournament.Data;

#nullable disable

namespace TennisTournament.Data.Migrations
{
    [DbContext(typeof(TennisContext))]
    [Migration("20230222084237_TennisTournament1")]
    partial class TennisTournament1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TennisTournament.Entities.Admin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FirstName = "AdminF",
                            LastName = "AdminL",
                            Password = "Password"
                        });
                });

            modelBuilder.Entity("TennisTournament.Entities.Court", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Courts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "CourtTest",
                            Number = 111
                        });
                });

            modelBuilder.Entity("TennisTournament.Entities.Match", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CourtID")
                        .HasColumnType("int");

                    b.Property<int>("FirstPlayerID")
                        .HasColumnType("int");

                    b.Property<int>("RefereeID")
                        .HasColumnType("int");

                    b.Property<int>("SecondPlayerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("TournamentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CourtID");

                    b.HasIndex("FirstPlayerID");

                    b.HasIndex("RefereeID");

                    b.HasIndex("SecondPlayerID");

                    b.HasIndex("TournamentID");

                    b.ToTable("Matchs");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CourtID = 1,
                            FirstPlayerID = 1,
                            RefereeID = 1,
                            SecondPlayerID = 2,
                            TournamentID = 1
                        });
                });

            modelBuilder.Entity("TennisTournament.Entities.Player", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("Sexe")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FirstName = "Quentin",
                            LastName = "CLAVIER",
                            Nationality = 67,
                            Sexe = 0
                        },
                        new
                        {
                            ID = 2,
                            FirstName = "Hugo",
                            LastName = "LETOURNEUR",
                            Nationality = 67,
                            Sexe = 0
                        });
                });

            modelBuilder.Entity("TennisTournament.Entities.Press", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Presses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FirstName = "PressF",
                            LastName = "PressL",
                            Password = "Password"
                        });
                });

            modelBuilder.Entity("TennisTournament.Entities.Referee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("Sexe")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Referees");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FirstName = "ArbitreF",
                            LastName = "ArbitreL",
                            Nationality = 176,
                            Sexe = 0
                        });
                });

            modelBuilder.Entity("TennisTournament.Entities.Result", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("EndingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("MatchID")
                        .HasColumnType("int");

                    b.Property<int>("PlayerID")
                        .HasColumnType("int");

                    b.Property<string>("Scores")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MatchID");

                    b.HasIndex("PlayerID");

                    b.ToTable("Results");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            MatchID = 1,
                            PlayerID = 1,
                            Scores = "6-2, 6-0, 6-1"
                        });
                });

            modelBuilder.Entity("TennisTournament.Entities.Tournament", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Test"
                        });
                });

            modelBuilder.Entity("TennisTournament.Entities.Match", b =>
                {
                    b.HasOne("TennisTournament.Entities.Court", "Court")
                        .WithMany("Matchs")
                        .HasForeignKey("CourtID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisTournament.Entities.Player", "FirstPlayer")
                        .WithMany()
                        .HasForeignKey("FirstPlayerID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("TennisTournament.Entities.Referee", "Referee")
                        .WithMany("Matchs")
                        .HasForeignKey("RefereeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisTournament.Entities.Player", "SecondPlayer")
                        .WithMany()
                        .HasForeignKey("SecondPlayerID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("TennisTournament.Entities.Tournament", "Tournament")
                        .WithMany("Matchs")
                        .HasForeignKey("TournamentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");

                    b.Navigation("FirstPlayer");

                    b.Navigation("Referee");

                    b.Navigation("SecondPlayer");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("TennisTournament.Entities.Result", b =>
                {
                    b.HasOne("TennisTournament.Entities.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisTournament.Entities.Player", "Player")
                        .WithMany("Results")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("TennisTournament.Entities.Court", b =>
                {
                    b.Navigation("Matchs");
                });

            modelBuilder.Entity("TennisTournament.Entities.Player", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("TennisTournament.Entities.Referee", b =>
                {
                    b.Navigation("Matchs");
                });

            modelBuilder.Entity("TennisTournament.Entities.Tournament", b =>
                {
                    b.Navigation("Matchs");
                });
#pragma warning restore 612, 618
        }
    }
}
